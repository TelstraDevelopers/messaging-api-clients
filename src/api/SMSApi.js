/**
 * Telstra SMS Messaging API
 * The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator. It also allows your application to track the delivery status of both sent and received SMS messages. 
 *
 * OpenAPI spec version: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorError', 'model/InboundPollResponse', 'model/MessageSentResponse', 'model/OutboundPollResponse', 'model/SendSMSRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorError'), require('../model/InboundPollResponse'), require('../model/MessageSentResponse'), require('../model/OutboundPollResponse'), require('../model/SendSMSRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.TelstraSmsMessagingApi) {
      root.TelstraSmsMessagingApi = {};
    }
    root.TelstraSmsMessagingApi.SMSApi = factory(root.TelstraSmsMessagingApi.ApiClient, root.TelstraSmsMessagingApi.ErrorError, root.TelstraSmsMessagingApi.InboundPollResponse, root.TelstraSmsMessagingApi.MessageSentResponse, root.TelstraSmsMessagingApi.OutboundPollResponse, root.TelstraSmsMessagingApi.SendSMSRequest);
  }
}(this, function(ApiClient, ErrorError, InboundPollResponse, MessageSentResponse, OutboundPollResponse, SendSMSRequest) {
  'use strict';

  /**
   * SMS service.
   * @module api/SMSApi
   * @version 2.1.0
   */

  /**
   * Constructs a new SMSApi. 
   * @alias module:api/SMSApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getMessageStatus operation.
     * @callback module:api/SMSApi~getMessageStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutboundPollResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Message Status
     * Retrieve the status of a single outgoing SMS message.
     * @param {String} authorization Authorization header in the format &#39;Bearer {access_token}&#39; - get the token by using the OAuth API with the scope &#39;SMS&#39;
     * @param {String} messageId Unique identifier of a message - it is the value returned from a previous POST call to https://api.telstra.com/v2/messages/sms
     * @param {module:api/SMSApi~getMessageStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutboundPollResponse}
     */
    this.getMessageStatus = function(authorization, messageId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling getMessageStatus");
      }

      // verify the required parameter 'messageId' is set
      if (messageId == undefined || messageId == null) {
        throw new Error("Missing the required parameter 'messageId' when calling getMessageStatus");
      }


      var pathParams = {
        'messageId': messageId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['OauthSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OutboundPollResponse;

      return this.apiClient.callApi(
        '/messages/sms/{messageId}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveMessages operation.
     * @callback module:api/SMSApi~retrieveMessagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InboundPollResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Messages
     * Retrieve the unread incoming SMS messages
     * @param {String} authorization Authorization header in the format &#39;Bearer {access_token}&#39; - get the token by using the OAuth API with the scope &#39;SMS&#39;
     * @param {module:api/SMSApi~retrieveMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InboundPollResponse>}
     */
    this.retrieveMessages = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling retrieveMessages");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['OauthSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [InboundPollResponse];

      return this.apiClient.callApi(
        '/messages/sms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMessage operation.
     * @callback module:api/SMSApi~sendMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageSentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Message
     * Send an SMS to a Australian or International mobile phone.
     * @param {String} authorization A header in the format &#39;Bearer {access_token}&#39; - get the token by using the OAuth API with the scope &#39;SMS&#39;
     * @param {module:model/SendSMSRequest} payload A JSON or XML payload containing the recipient&#39;s phone number and text message. The recipient number should be in the format &#39;04xxxxxxxx&#39; where x is a digit
     * @param {module:api/SMSApi~sendMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageSentResponse}
     */
    this.sendMessage = function(authorization, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling sendMessage");
      }

      // verify the required parameter 'payload' is set
      if (payload == undefined || payload == null) {
        throw new Error("Missing the required parameter 'payload' when calling sendMessage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['OauthSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MessageSentResponse;

      return this.apiClient.callApi(
        '/messages/sms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
